#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 127a33e6825e2e83
// Used for: Fixing Nvidia lava waterfall artifacts.
// Check rules.txt for documentation and when to enable.



uniform ivec4 uf_remappedVS[24];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem8;
layout(location = 4) in uvec4 attrDataSem12;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 5) out vec4 passParameterSem5;
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 4) out vec4 passParameterSem4;
layout(location = 7) out vec4 passParameterSem7;
layout(location = 3) out vec4 passParameterSem3;
layout(location = 6) out vec4 passParameterSem6;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyzw = attrDataSem0.xyzw;
attrDecoder = ((attrDecoder>>8)&0xFF)|((attrDecoder<<8)&0xFF00);
attrDecoder.xyzw = floatBitsToInt(vec4(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)),unpackHalf2x16(attrDecoder.z|(attrDecoder.w<<16))));
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.x = attrDataSem1.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xyzw = uvec4((attrDecoder.x>>0)&0x3FF,(attrDecoder.x>>10)&0x3FF,(attrDecoder.x>>20)&0x3FF,(attrDecoder.x>>30)&0x3);
if( (attrDecoder.x&0x200) != 0 ) attrDecoder.x |= 0xFFFFFC00;
if( (attrDecoder.y&0x200) != 0 ) attrDecoder.y |= 0xFFFFFC00;
if( (attrDecoder.z&0x200) != 0 ) attrDecoder.z |= 0xFFFFFC00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/511.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/511.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/511.0,-1.0));
attrDecoder.w = floatBitsToUint(float(attrDecoder.w));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xyzw = attrDataSem2.xyzw;
if( (attrDecoder.x&0x80) != 0 ) attrDecoder.x |= 0xFFFFFF00;
if( (attrDecoder.y&0x80) != 0 ) attrDecoder.y |= 0xFFFFFF00;
if( (attrDecoder.z&0x80) != 0 ) attrDecoder.z |= 0xFFFFFF00;
if( (attrDecoder.w&0x80) != 0 ) attrDecoder.w |= 0xFFFFFF00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/127.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/127.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/127.0,-1.0));
attrDecoder.w = floatBitsToUint(max(float(int(attrDecoder.w))/127.0,-1.0));
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem8.xy;
attrDecoder.xy = ((attrDecoder.xy>>8)&0xFF)|((attrDecoder.xy<<8)&0xFF00);
attrDecoder.z = 0;
attrDecoder.w = 0;
if( (attrDecoder.x&0x8000) != 0 ) attrDecoder.x |= 0xFFFF0000;
if( (attrDecoder.y&0x8000) != 0 ) attrDecoder.y |= 0xFFFF0000;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/32767.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/32767.0,-1.0));
attrDecoder.zw = uvec2(0);
R5f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem12.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
// 0
R7f.x = 1.0;
R6f.y = 1.0;
R0f.z = intBitsToFloat(uf_remappedVS[0].y);
R127f.w = 1.0;
PV0f.w = R127f.w;
R124f.x = intBitsToFloat(uf_remappedVS[1].x);
PS0f = R124f.x;
// 1
R6f.x = dot(vec4(R3f.x,R3f.y,R3f.z,PV0f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV1f.x = R6f.x;
PV1f.y = R6f.x;
PV1f.z = R6f.x;
PV1f.w = R6f.x;
R13f.w = R4f.w;
PS1f = R13f.w;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.y = tempf.x;
R12f.z = R5f.x;
PS0f = R12f.z;
// 3
backupReg0f = R3f.z;
tempf.x = dot(vec4(R3f.x,R3f.y,backupReg0f,R127f.w),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.z = tempf.x;
R12f.w = R5f.y;
PS1f = R12f.w;
// 4
R3f.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),0.0));
PV0f.x = R3f.x;
PV0f.y = R3f.x;
PV0f.z = R3f.x;
PV0f.w = R3f.x;
R127f.x = mul_nonIEEE(R4f.z, intBitsToFloat(uf_remappedVS[2].z));
PS0f = R127f.x;
// 5
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R124f.y = tempf.x;
R126f.x = mul_nonIEEE(R4f.z, intBitsToFloat(uf_remappedVS[3].z));
PS1f = R126f.x;
// 6
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R125f.z = tempf.x;
R125f.x = mul_nonIEEE(R4f.z, intBitsToFloat(uf_remappedVS[4].z));
PS0f = R125f.x;
// 7
backupReg0f = R126f.x;
R126f.x = dot(vec4(R4f.x,R4f.y,R127f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),1.0,0.0));
PV1f.x = R126f.x;
PV1f.y = R126f.x;
PV1f.z = R126f.x;
PV1f.w = R126f.x;
R122f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[3].y)) + backupReg0f);
PS1f = R122f.x;
// 8
R123f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[4].y)) + R125f.x);
PV0f.x = R123f.x;
R2f.y = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[3].x)) + PS1f);
PS0f = mul_nonIEEE(R125f.z, R125f.z);
// 9
R123f.x = (mul_nonIEEE(R124f.y,R124f.y) + PS0f);
PV1f.x = R123f.x;
R4f.z = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[4].x)) + PV0f.x);
R127f.w = intBitsToFloat(uf_remappedVS[1].y);
// 10
R125f.x = intBitsToFloat(uf_remappedVS[5].x);
R127f.y = intBitsToFloat(uf_remappedVS[5].y);
R126f.z = intBitsToFloat(uf_remappedVS[6].x);
R123f.w = (mul_nonIEEE(R3f.x,R3f.x) + PV1f.x);
PV0f.w = R123f.w;
R125f.y = intBitsToFloat(uf_remappedVS[6].y);
PS0f = R125f.y;
// 11
backupReg0f = R124f.x;
R124f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].y),R0f.z) + R127f.w);
R126f.y = intBitsToFloat(uf_remappedVS[8].y);
R127f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].x),R0f.z) + backupReg0f);
R127f.w = intBitsToFloat(uf_remappedVS[8].x);
tempResultf = 1.0 / sqrt(PV0f.w);
R124f.z = tempResultf;
PS1f = R124f.z;
// 12
tempf.x = dot(vec4(R126f.x,R2f.y,R4f.z,-0.0),vec4(R126f.x,R2f.y,R4f.z,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R4f.y = tempf.x;
R4f.x = intBitsToFloat(uf_remappedVS[1].z);
PS0f = R4f.x;
// 13
backupReg0f = R127f.y;
backupReg1f = R125f.x;
R125f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].x),R0f.z) + R127f.w);
R127f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y),R0f.z) + backupReg0f);
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].x),R0f.z) + backupReg1f);
PV1f.z = R123f.z;
R127f.w = intBitsToFloat(uf_remappedVS[1].w);
R127f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y),R0f.z) + R126f.y);
PS1f = R127f.x;
// 14
backupReg0f = R127f.z;
R2f.x = intBitsToFloat(uf_remappedVS[10].x);
R126f.y = intBitsToFloat(uf_remappedVS[11].x);
R127f.z = intBitsToFloat(uf_remappedVS[11].y);
R126f.w = intBitsToFloat(uf_remappedVS[10].y);
R0f.x = (mul_nonIEEE(R5f.x,backupReg0f) + PV1f.z);
PS0f = R0f.x;
// 15
backupReg0f = R127f.y;
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].y),R0f.z) + R125f.y);
PV1f.x = R123f.x;
R127f.y = intBitsToFloat(uf_remappedVS[6].w);
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].x),R0f.z) + R126f.z);
PV1f.z = R123f.z;
R125f.w = intBitsToFloat(uf_remappedVS[6].z);
R126f.z = (mul_nonIEEE(R5f.x,R124f.x) + backupReg0f);
PS1f = R126f.z;
// 16
backupReg0f = R4f.y;
R8f.x = mul_nonIEEE(R125f.z, R124f.z);
R4f.y = mul_nonIEEE(R124f.y, R124f.z);
R125f.z = (mul_nonIEEE(R5f.x,PV1f.x) + R127f.x);
R124f.w = (mul_nonIEEE(R5f.x,PV1f.z) + R125f.x);
tempResultf = 1.0 / sqrt(backupReg0f);
R4f.w = tempResultf;
PS0f = R4f.w;
// 17
backupReg0f = R3f.x;
R3f.x = mul_nonIEEE(backupReg0f, R124f.z);
R125f.y = intBitsToFloat(uf_remappedVS[12].x);
R2f.z = intBitsToFloat(uf_remappedVS[13].x);
R0f.w = intBitsToFloat(uf_remappedVS[13].y);
R9f.x = mul_nonIEEE(R126f.x, PS0f);
PS1f = R9f.x;
// 18
R126f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].x),R0f.z) + R2f.x);
R124f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].w),R0f.z) + R127f.w);
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].z),R0f.z) + R4f.x);
PV0f.z = R123f.z;
R127f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].y),R0f.z) + R126f.w);
R124f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].z),R0f.z) + R125f.w);
PS0f = R124f.z;
// 19
R127f.x = intBitsToFloat(uf_remappedVS[10].z);
R123f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y),R0f.z) + R127f.z);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].x),R0f.z) + R126f.y);
PV1f.z = R123f.z;
R126f.w = intBitsToFloat(uf_remappedVS[10].w);
R125f.w = (mul_nonIEEE(R5f.y,PV0f.z) + R0f.x);
PS1f = R125f.w;
// 20
R123f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].w),R0f.z) + R127f.y);
PV0f.x = R123f.x;
R127f.y = (mul_nonIEEE(R5f.y,R124f.y) + R126f.z);
R126f.z = (mul_nonIEEE(R5f.x,R126f.x) + PV1f.z);
R2f.w = (mul_nonIEEE(R5f.x,R127f.w) + PV1f.y);
R124f.y = (mul_nonIEEE(R5f.y,R124f.z) + R124f.w);
PS0f = R124f.y;
// 21
backupReg0f = R2f.z;
backupReg1f = R0f.w;
R126f.x = (mul_nonIEEE(R5f.y,PV0f.x) + R125f.z);
R3f.y = mul_nonIEEE(R2f.y, R4f.w);
R2f.z = mul_nonIEEE(R4f.z, R4f.w);
R0f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].x),R125f.y) + backupReg0f);
R4f.w = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].y),R125f.y) + backupReg1f);
PS1f = R4f.w;
// 22
R2f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].w),R0f.z) + R126f.w);
R123f.z = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[7].z),R0f.z) + R127f.x);
PV0f.z = R123f.z;
R10f.w = R127f.y;
R10f.z = R125f.w;
PS0f = R10f.z;
// 23
R0f.x = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[15].y)) + intBitsToFloat(uf_remappedVS[16].y));
R7f.y = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[15].x)) + intBitsToFloat(uf_remappedVS[16].x));
R11f.z = R124f.y;
R11f.w = R126f.x;
R11f.x = (mul_nonIEEE(R5f.y,PV0f.z) + R126f.z);
PS1f = R11f.x;
// export
passParameterSem5 = vec4(R1f.x, R1f.y, R1f.z, 1.0); // = "workaround"
// 0
backupReg0f = R0f.y;
tempf.x = dot(vec4(R6f.x,backupReg0f,R3f.z,R7f.x),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),intBitsToFloat(uf_remappedVS[17].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R11f.y = (mul_nonIEEE(R5f.y,R2f.y) + R2f.w);
PS0f = R11f.y;
// 1
backupReg0f = R0f.y;
tempf.x = dot(vec4(R6f.x,backupReg0f,R3f.z,R7f.x),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),intBitsToFloat(uf_remappedVS[18].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R15f.x = PV0f.x;
PS1f = R15f.x;
// 2
backupReg0f = R0f.y;
tempf.x = dot(vec4(R6f.x,backupReg0f,R3f.z,R7f.x),vec4(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].z),intBitsToFloat(uf_remappedVS[19].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R15f.y = PV1f.x;
PS0f = R15f.y;
// 3
R10f.x = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[12].x)) + R0f.w);
R10f.y = (mul_nonIEEE(intBitsToFloat(uf_remappedVS[14].w),intBitsToFloat(uf_remappedVS[12].x)) + R4f.w);
R15f.z = PV0f.x;
PV1f.z = R15f.z;
// 4
tempf.x = dot(vec4(R15f.x,R15f.y,PV1f.z,R6f.y),vec4(intBitsToFloat(uf_remappedVS[20].x),intBitsToFloat(uf_remappedVS[20].y),intBitsToFloat(uf_remappedVS[20].z),intBitsToFloat(uf_remappedVS[20].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.y = tempf.x;
// 5
R1f.x = dot(vec4(R15f.x,R15f.y,R15f.z,R6f.y),vec4(intBitsToFloat(uf_remappedVS[21].x),intBitsToFloat(uf_remappedVS[21].y),intBitsToFloat(uf_remappedVS[21].z),intBitsToFloat(uf_remappedVS[21].w)));
PV1f.x = R1f.x;
PV1f.y = R1f.x;
PV1f.z = R1f.x;
PV1f.w = R1f.x;
R126f.z = -(PV0f.x);
PS1f = R126f.z;
// 6
tempf.x = dot(vec4(R15f.x,R15f.y,R15f.z,R6f.y),vec4(intBitsToFloat(uf_remappedVS[22].x),intBitsToFloat(uf_remappedVS[22].y),intBitsToFloat(uf_remappedVS[22].z),intBitsToFloat(uf_remappedVS[22].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R1f.z = tempf.x;
// 7
tempf.x = dot(vec4(R15f.x,R15f.y,R15f.z,R6f.y),vec4(intBitsToFloat(uf_remappedVS[23].x),intBitsToFloat(uf_remappedVS[23].y),intBitsToFloat(uf_remappedVS[23].z),intBitsToFloat(uf_remappedVS[23].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.w = tempf.x;
R6f.z = PV0f.x;
PS1f = R6f.z;
// 8
tempf.x = dot(vec4(R3f.x,R4f.y,R8f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R6f.x = R1f.x + PV1f.x;
R6f.x /= 2.0;
PS0f = R6f.x;
// 9
tempf.x = dot(vec4(R3f.x,R4f.y,R8f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R14f.x = PV0f.x;
PS1f = R14f.x;
// 10
tempf.x = dot(vec4(R3f.x,R4f.y,R8f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R14f.y = PV1f.x;
PS0f = R14f.y;
// 11
R13f.x = dot(vec4(R9f.x,R3f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[17].x),intBitsToFloat(uf_remappedVS[17].y),intBitsToFloat(uf_remappedVS[17].z),0.0));
PV1f.x = R13f.x;
PV1f.y = R13f.x;
PV1f.z = R13f.x;
PV1f.w = R13f.x;
R14f.z = PV0f.x;
PS1f = R14f.z;
// 12
tempf.x = dot(vec4(R9f.x,R3f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[18].x),intBitsToFloat(uf_remappedVS[18].y),intBitsToFloat(uf_remappedVS[18].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R13f.y = tempf.x;
R6f.y = R126f.z + R1f.w;
R6f.y /= 2.0;
PS0f = R6f.y;
// 13
tempf.x = dot(vec4(R9f.x,R3f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[19].x),intBitsToFloat(uf_remappedVS[19].y),intBitsToFloat(uf_remappedVS[19].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R13f.z = tempf.x;
R6f.w = R1f.w;
PS1f = R6f.w;
// 14
R12f.x = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[15].z)) + R7f.y);
R12f.y = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[15].w)) + R0f.x);
// export
gl_Position = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem0 = vec4(R10f.x, R10f.y, R10f.z, R10f.w);
// export
passParameterSem1 = vec4(R11f.x, R11f.y, R11f.z, R11f.w);
// export
passParameterSem2 = vec4(R12f.x, R12f.y, R12f.z, R12f.w);
// export
passParameterSem4 = vec4(R13f.x, R13f.y, R13f.z, R13f.w);
// export
passParameterSem7 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
// export
passParameterSem3 = vec4(R14f.x, R14f.y, R14f.z, R14f.w);
// export
passParameterSem6 = vec4(R15f.x, R15f.y, R15f.z, R15f.w);
}
